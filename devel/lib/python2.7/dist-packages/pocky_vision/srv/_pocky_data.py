# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pocky_vision/pocky_dataRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class pocky_dataRequest(genpy.Message):
  _md5sum = "68a61dd9374748e7d9ec4f21de7be8ea"
  _type = "pocky_vision/pocky_dataRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64   request_flag
"""
  __slots__ = ['request_flag']
  _slot_types = ['int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       request_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pocky_dataRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.request_flag is None:
        self.request_flag = 0
    else:
      self.request_flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.request_flag
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 8
      (self.request_flag,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.request_flag
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 8
      (self.request_flag,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pocky_vision/pocky_dataResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class pocky_dataResponse(genpy.Message):
  _md5sum = "96694ad091a0af345f8f2fadef5ce974"
  _type = "pocky_vision/pocky_dataResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool is_done
string[]  top_box
float64[] top_CenterX
float64[] top_CenterY
float64[] top_Angle
string[] bottom_box
float64[] bottom_CenterX
float64[] bottom_CenterY
float64[] bottom_Angle
"""
  __slots__ = ['is_done','top_box','top_CenterX','top_CenterY','top_Angle','bottom_box','bottom_CenterX','bottom_CenterY','bottom_Angle']
  _slot_types = ['bool','string[]','float64[]','float64[]','float64[]','string[]','float64[]','float64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_done,top_box,top_CenterX,top_CenterY,top_Angle,bottom_box,bottom_CenterX,bottom_CenterY,bottom_Angle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pocky_dataResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.is_done is None:
        self.is_done = False
      if self.top_box is None:
        self.top_box = []
      if self.top_CenterX is None:
        self.top_CenterX = []
      if self.top_CenterY is None:
        self.top_CenterY = []
      if self.top_Angle is None:
        self.top_Angle = []
      if self.bottom_box is None:
        self.bottom_box = []
      if self.bottom_CenterX is None:
        self.bottom_CenterX = []
      if self.bottom_CenterY is None:
        self.bottom_CenterY = []
      if self.bottom_Angle is None:
        self.bottom_Angle = []
    else:
      self.is_done = False
      self.top_box = []
      self.top_CenterX = []
      self.top_CenterY = []
      self.top_Angle = []
      self.bottom_box = []
      self.bottom_CenterX = []
      self.bottom_CenterY = []
      self.bottom_Angle = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.is_done
      buff.write(_get_struct_B().pack(_x))
      length = len(self.top_box)
      buff.write(_struct_I.pack(length))
      for val1 in self.top_box:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.top_CenterX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.top_CenterX))
      length = len(self.top_CenterY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.top_CenterY))
      length = len(self.top_Angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.top_Angle))
      length = len(self.bottom_box)
      buff.write(_struct_I.pack(length))
      for val1 in self.bottom_box:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.bottom_CenterX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.bottom_CenterX))
      length = len(self.bottom_CenterY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.bottom_CenterY))
      length = len(self.bottom_Angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.bottom_Angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.is_done,) = _get_struct_B().unpack(str[start:end])
      self.is_done = bool(self.is_done)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.top_box = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.top_box.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.top_CenterX = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.top_CenterY = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.top_Angle = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bottom_box = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.bottom_box.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.bottom_CenterX = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.bottom_CenterY = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.bottom_Angle = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.is_done
      buff.write(_get_struct_B().pack(_x))
      length = len(self.top_box)
      buff.write(_struct_I.pack(length))
      for val1 in self.top_box:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.top_CenterX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.top_CenterX.tostring())
      length = len(self.top_CenterY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.top_CenterY.tostring())
      length = len(self.top_Angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.top_Angle.tostring())
      length = len(self.bottom_box)
      buff.write(_struct_I.pack(length))
      for val1 in self.bottom_box:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.bottom_CenterX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.bottom_CenterX.tostring())
      length = len(self.bottom_CenterY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.bottom_CenterY.tostring())
      length = len(self.bottom_Angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.bottom_Angle.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.is_done,) = _get_struct_B().unpack(str[start:end])
      self.is_done = bool(self.is_done)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.top_box = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.top_box.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.top_CenterX = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.top_CenterY = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.top_Angle = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bottom_box = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.bottom_box.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.bottom_CenterX = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.bottom_CenterY = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.bottom_Angle = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class pocky_data(object):
  _type          = 'pocky_vision/pocky_data'
  _md5sum = '4482c320afdc1319d32f82f385f7708d'
  _request_class  = pocky_dataRequest
  _response_class = pocky_dataResponse
