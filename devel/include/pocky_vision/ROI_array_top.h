// Generated by gencpp from file pocky_vision/ROI_array_top.msg
// DO NOT EDIT!


#ifndef POCKY_VISION_MESSAGE_ROI_ARRAY_TOP_H
#define POCKY_VISION_MESSAGE_ROI_ARRAY_TOP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pocky_vision/ROI_top.h>

namespace pocky_vision
{
template <class ContainerAllocator>
struct ROI_array_top_
{
  typedef ROI_array_top_<ContainerAllocator> Type;

  ROI_array_top_()
    : ROI_top_list()  {
    }
  ROI_array_top_(const ContainerAllocator& _alloc)
    : ROI_top_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::pocky_vision::ROI_top_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pocky_vision::ROI_top_<ContainerAllocator> >::other >  _ROI_top_list_type;
  _ROI_top_list_type ROI_top_list;





  typedef boost::shared_ptr< ::pocky_vision::ROI_array_top_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pocky_vision::ROI_array_top_<ContainerAllocator> const> ConstPtr;

}; // struct ROI_array_top_

typedef ::pocky_vision::ROI_array_top_<std::allocator<void> > ROI_array_top;

typedef boost::shared_ptr< ::pocky_vision::ROI_array_top > ROI_array_topPtr;
typedef boost::shared_ptr< ::pocky_vision::ROI_array_top const> ROI_array_topConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pocky_vision::ROI_array_top_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pocky_vision::ROI_array_top_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pocky_vision::ROI_array_top_<ContainerAllocator1> & lhs, const ::pocky_vision::ROI_array_top_<ContainerAllocator2> & rhs)
{
  return lhs.ROI_top_list == rhs.ROI_top_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pocky_vision::ROI_array_top_<ContainerAllocator1> & lhs, const ::pocky_vision::ROI_array_top_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pocky_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pocky_vision::ROI_array_top_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pocky_vision::ROI_array_top_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pocky_vision::ROI_array_top_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pocky_vision::ROI_array_top_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pocky_vision::ROI_array_top_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pocky_vision::ROI_array_top_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pocky_vision::ROI_array_top_<ContainerAllocator> >
{
  static const char* value()
  {
    return "355919cc8ce59f1f4229b0fb075cd563";
  }

  static const char* value(const ::pocky_vision::ROI_array_top_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x355919cc8ce59f1fULL;
  static const uint64_t static_value2 = 0x4229b0fb075cd563ULL;
};

template<class ContainerAllocator>
struct DataType< ::pocky_vision::ROI_array_top_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pocky_vision/ROI_array_top";
  }

  static const char* value(const ::pocky_vision::ROI_array_top_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pocky_vision::ROI_array_top_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ROI_top[] ROI_top_list\n"
"\n"
"================================================================================\n"
"MSG: pocky_vision/ROI_top\n"
"string  top_box\n"
"float64 top_CenterX\n"
"float64 top_CenterY\n"
"float64 top_Angle\n"
;
  }

  static const char* value(const ::pocky_vision::ROI_array_top_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pocky_vision::ROI_array_top_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ROI_top_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ROI_array_top_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pocky_vision::ROI_array_top_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pocky_vision::ROI_array_top_<ContainerAllocator>& v)
  {
    s << indent << "ROI_top_list[]" << std::endl;
    for (size_t i = 0; i < v.ROI_top_list.size(); ++i)
    {
      s << indent << "  ROI_top_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pocky_vision::ROI_top_<ContainerAllocator> >::stream(s, indent + "    ", v.ROI_top_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POCKY_VISION_MESSAGE_ROI_ARRAY_TOP_H
