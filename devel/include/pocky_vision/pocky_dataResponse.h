// Generated by gencpp from file pocky_vision/pocky_dataResponse.msg
// DO NOT EDIT!


#ifndef POCKY_VISION_MESSAGE_POCKY_DATARESPONSE_H
#define POCKY_VISION_MESSAGE_POCKY_DATARESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pocky_vision
{
template <class ContainerAllocator>
struct pocky_dataResponse_
{
  typedef pocky_dataResponse_<ContainerAllocator> Type;

  pocky_dataResponse_()
    : is_done(false)
    , top_box()
    , top_CenterX()
    , top_CenterY()
    , top_Angle()
    , bottom_box()
    , bottom_CenterX()
    , bottom_CenterY()
    , bottom_Angle()  {
    }
  pocky_dataResponse_(const ContainerAllocator& _alloc)
    : is_done(false)
    , top_box(_alloc)
    , top_CenterX(_alloc)
    , top_CenterY(_alloc)
    , top_Angle(_alloc)
    , bottom_box(_alloc)
    , bottom_CenterX(_alloc)
    , bottom_CenterY(_alloc)
    , bottom_Angle(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _is_done_type;
  _is_done_type is_done;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _top_box_type;
  _top_box_type top_box;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _top_CenterX_type;
  _top_CenterX_type top_CenterX;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _top_CenterY_type;
  _top_CenterY_type top_CenterY;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _top_Angle_type;
  _top_Angle_type top_Angle;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _bottom_box_type;
  _bottom_box_type bottom_box;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _bottom_CenterX_type;
  _bottom_CenterX_type bottom_CenterX;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _bottom_CenterY_type;
  _bottom_CenterY_type bottom_CenterY;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _bottom_Angle_type;
  _bottom_Angle_type bottom_Angle;





  typedef boost::shared_ptr< ::pocky_vision::pocky_dataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pocky_vision::pocky_dataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct pocky_dataResponse_

typedef ::pocky_vision::pocky_dataResponse_<std::allocator<void> > pocky_dataResponse;

typedef boost::shared_ptr< ::pocky_vision::pocky_dataResponse > pocky_dataResponsePtr;
typedef boost::shared_ptr< ::pocky_vision::pocky_dataResponse const> pocky_dataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pocky_vision::pocky_dataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pocky_vision::pocky_dataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pocky_vision::pocky_dataResponse_<ContainerAllocator1> & lhs, const ::pocky_vision::pocky_dataResponse_<ContainerAllocator2> & rhs)
{
  return lhs.is_done == rhs.is_done &&
    lhs.top_box == rhs.top_box &&
    lhs.top_CenterX == rhs.top_CenterX &&
    lhs.top_CenterY == rhs.top_CenterY &&
    lhs.top_Angle == rhs.top_Angle &&
    lhs.bottom_box == rhs.bottom_box &&
    lhs.bottom_CenterX == rhs.bottom_CenterX &&
    lhs.bottom_CenterY == rhs.bottom_CenterY &&
    lhs.bottom_Angle == rhs.bottom_Angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pocky_vision::pocky_dataResponse_<ContainerAllocator1> & lhs, const ::pocky_vision::pocky_dataResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pocky_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pocky_vision::pocky_dataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pocky_vision::pocky_dataResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pocky_vision::pocky_dataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pocky_vision::pocky_dataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pocky_vision::pocky_dataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pocky_vision::pocky_dataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pocky_vision::pocky_dataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "96694ad091a0af345f8f2fadef5ce974";
  }

  static const char* value(const ::pocky_vision::pocky_dataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x96694ad091a0af34ULL;
  static const uint64_t static_value2 = 0x5f8f2fadef5ce974ULL;
};

template<class ContainerAllocator>
struct DataType< ::pocky_vision::pocky_dataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pocky_vision/pocky_dataResponse";
  }

  static const char* value(const ::pocky_vision::pocky_dataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pocky_vision::pocky_dataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool is_done\n"
"string[]  top_box\n"
"float64[] top_CenterX\n"
"float64[] top_CenterY\n"
"float64[] top_Angle\n"
"string[] bottom_box\n"
"float64[] bottom_CenterX\n"
"float64[] bottom_CenterY\n"
"float64[] bottom_Angle\n"
;
  }

  static const char* value(const ::pocky_vision::pocky_dataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pocky_vision::pocky_dataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_done);
      stream.next(m.top_box);
      stream.next(m.top_CenterX);
      stream.next(m.top_CenterY);
      stream.next(m.top_Angle);
      stream.next(m.bottom_box);
      stream.next(m.bottom_CenterX);
      stream.next(m.bottom_CenterY);
      stream.next(m.bottom_Angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pocky_dataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pocky_vision::pocky_dataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pocky_vision::pocky_dataResponse_<ContainerAllocator>& v)
  {
    s << indent << "is_done: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_done);
    s << indent << "top_box[]" << std::endl;
    for (size_t i = 0; i < v.top_box.size(); ++i)
    {
      s << indent << "  top_box[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.top_box[i]);
    }
    s << indent << "top_CenterX[]" << std::endl;
    for (size_t i = 0; i < v.top_CenterX.size(); ++i)
    {
      s << indent << "  top_CenterX[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.top_CenterX[i]);
    }
    s << indent << "top_CenterY[]" << std::endl;
    for (size_t i = 0; i < v.top_CenterY.size(); ++i)
    {
      s << indent << "  top_CenterY[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.top_CenterY[i]);
    }
    s << indent << "top_Angle[]" << std::endl;
    for (size_t i = 0; i < v.top_Angle.size(); ++i)
    {
      s << indent << "  top_Angle[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.top_Angle[i]);
    }
    s << indent << "bottom_box[]" << std::endl;
    for (size_t i = 0; i < v.bottom_box.size(); ++i)
    {
      s << indent << "  bottom_box[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bottom_box[i]);
    }
    s << indent << "bottom_CenterX[]" << std::endl;
    for (size_t i = 0; i < v.bottom_CenterX.size(); ++i)
    {
      s << indent << "  bottom_CenterX[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.bottom_CenterX[i]);
    }
    s << indent << "bottom_CenterY[]" << std::endl;
    for (size_t i = 0; i < v.bottom_CenterY.size(); ++i)
    {
      s << indent << "  bottom_CenterY[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.bottom_CenterY[i]);
    }
    s << indent << "bottom_Angle[]" << std::endl;
    for (size_t i = 0; i < v.bottom_Angle.size(); ++i)
    {
      s << indent << "  bottom_Angle[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.bottom_Angle[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POCKY_VISION_MESSAGE_POCKY_DATARESPONSE_H
