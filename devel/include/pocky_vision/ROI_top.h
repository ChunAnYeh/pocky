// Generated by gencpp from file pocky_vision/ROI_top.msg
// DO NOT EDIT!


#ifndef POCKY_VISION_MESSAGE_ROI_TOP_H
#define POCKY_VISION_MESSAGE_ROI_TOP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pocky_vision
{
template <class ContainerAllocator>
struct ROI_top_
{
  typedef ROI_top_<ContainerAllocator> Type;

  ROI_top_()
    : top_box()
    , top_CenterX(0.0)
    , top_CenterY(0.0)
    , top_Angle(0.0)  {
    }
  ROI_top_(const ContainerAllocator& _alloc)
    : top_box(_alloc)
    , top_CenterX(0.0)
    , top_CenterY(0.0)
    , top_Angle(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _top_box_type;
  _top_box_type top_box;

   typedef double _top_CenterX_type;
  _top_CenterX_type top_CenterX;

   typedef double _top_CenterY_type;
  _top_CenterY_type top_CenterY;

   typedef double _top_Angle_type;
  _top_Angle_type top_Angle;





  typedef boost::shared_ptr< ::pocky_vision::ROI_top_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pocky_vision::ROI_top_<ContainerAllocator> const> ConstPtr;

}; // struct ROI_top_

typedef ::pocky_vision::ROI_top_<std::allocator<void> > ROI_top;

typedef boost::shared_ptr< ::pocky_vision::ROI_top > ROI_topPtr;
typedef boost::shared_ptr< ::pocky_vision::ROI_top const> ROI_topConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pocky_vision::ROI_top_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pocky_vision::ROI_top_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pocky_vision::ROI_top_<ContainerAllocator1> & lhs, const ::pocky_vision::ROI_top_<ContainerAllocator2> & rhs)
{
  return lhs.top_box == rhs.top_box &&
    lhs.top_CenterX == rhs.top_CenterX &&
    lhs.top_CenterY == rhs.top_CenterY &&
    lhs.top_Angle == rhs.top_Angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pocky_vision::ROI_top_<ContainerAllocator1> & lhs, const ::pocky_vision::ROI_top_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pocky_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pocky_vision::ROI_top_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pocky_vision::ROI_top_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pocky_vision::ROI_top_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pocky_vision::ROI_top_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pocky_vision::ROI_top_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pocky_vision::ROI_top_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pocky_vision::ROI_top_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d377af5cd089c7785cff2ae8dcde5c3";
  }

  static const char* value(const ::pocky_vision::ROI_top_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d377af5cd089c77ULL;
  static const uint64_t static_value2 = 0x85cff2ae8dcde5c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::pocky_vision::ROI_top_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pocky_vision/ROI_top";
  }

  static const char* value(const ::pocky_vision::ROI_top_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pocky_vision::ROI_top_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string  top_box\n"
"float64 top_CenterX\n"
"float64 top_CenterY\n"
"float64 top_Angle\n"
;
  }

  static const char* value(const ::pocky_vision::ROI_top_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pocky_vision::ROI_top_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.top_box);
      stream.next(m.top_CenterX);
      stream.next(m.top_CenterY);
      stream.next(m.top_Angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ROI_top_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pocky_vision::ROI_top_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pocky_vision::ROI_top_<ContainerAllocator>& v)
  {
    s << indent << "top_box: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.top_box);
    s << indent << "top_CenterX: ";
    Printer<double>::stream(s, indent + "  ", v.top_CenterX);
    s << indent << "top_CenterY: ";
    Printer<double>::stream(s, indent + "  ", v.top_CenterY);
    s << indent << "top_Angle: ";
    Printer<double>::stream(s, indent + "  ", v.top_Angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POCKY_VISION_MESSAGE_ROI_TOP_H
